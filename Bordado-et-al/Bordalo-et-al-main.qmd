---
title: "Bordalo-et-al-main"
format: html
editor: visual
---

```{r Set-up and Data importing, warning=FALSE}
library(haven) # For importing dta files
library(fixest) # For regressions
library(modelsummary) # For formatting models into tables
library(tidyr) # For data manipulations and analysis

# Import data
Bordalo <- read_dta("/Users/jacobogomezlandero/Documents/Notre Dame PhD/Coursework/Field courses/Expectations/Replications/Econ-70330/Bordado-et-al/Data/spf_out_trim5.dta")

```

```{r Define function for CB regressions, echo=FALSE, warning=FALSE}

run_forecast_regressions <- function(data, error_var, revision_var) {
  #------------------------------------------------------------
  # 1. Select relevant columns
  #------------------------------------------------------------
  df <- data %>%
    select(year, quarter, yq, ID, all_of(c(error_var, revision_var))) %>%
    rename(
      forecast_error = !!sym(error_var),
      forecast_revision = !!sym(revision_var)
    )
  
  #------------------------------------------------------------
  # 2. Prepare individual-level data
  #------------------------------------------------------------
  df_indiv <- df %>%
    mutate(valid = if_else(!is.na(forecast_error) & !is.na(forecast_revision), 1, 0)) %>%
    group_by(ID) %>%
    mutate(total_obs = sum(valid, na.rm = TRUE)) %>%
    ungroup()
  
  #------------------------------------------------------------
  # 3. Pooled regression (clustered by ID + time)
  #------------------------------------------------------------
  m_indiv <- feols(
    forecast_error ~ forecast_revision,
    data = filter(df_indiv, total_obs >= 10), # Notice henceforth we only keep forecasters with 10 or more obs
    cluster = ~ ID + yq
  )
  
  #------------------------------------------------------------
  # 4. Forecaster-by-forecaster regressions
  #------------------------------------------------------------
  median_f_by_f <- df_indiv %>%
    filter(total_obs >= 10) %>%
    group_split(ID) %>%
    map_dbl(~ coef(lm(forecast_error ~ forecast_revision, data = .x))[2]) %>%
    median(na.rm = TRUE)
  
  #------------------------------------------------------------
  # 5. Consensus regression
  #------------------------------------------------------------
  df_consensus <- df_indiv %>%
    group_by(yq) %>%
    summarise(
      forecast_error = mean(forecast_error, na.rm = TRUE),
      forecast_revision = mean(forecast_revision, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    mutate(yq = as.numeric(yq))
  
  m_consensus <- feols(
    forecast_error ~ forecast_revision,
    data = df_consensus,
    NW ~ yq
  )
  
  #------------------------------------------------------------
  # 6. Return results as a list
  #------------------------------------------------------------
  list(
    m_indiv = m_indiv,
    m_consensus = m_consensus,
    median_f_by_f = median_f_by_f
  )
}

```

```{r Run regressions for all variables, echo=FALSE, warning=FALSE}

# Declare the variables and corresponding labels
forecast_specs <- tribble(
  ~short,      ~error_var,        ~revision_var,      ~label,
  "NGDP",      "eNGDP_f3ql",      "rNGDP_f3q",        "Nominal GDP",
  "RGDP",      "eRGDP_f3ql",      "rRGDP_f3q",        "Real GDP",
  "PGDP",      "ePGDP_f3ql",      "rPGDP_f3q",        "GDP Price Index Inflation",
  "CPI",       "eCPI_f3ql",       "rCPI_f3q",         "Inflation (CPI)",
  "RCONSUM",   "eRCONSUM_f3ql",   "rRCONSUM_f3q",     "Real Consumption",
  "INDPROD",   "eINDPROD_f3ql",   "rINDPROD_f3q",     "Industrial Production",
  "RNRESIN",   "eRNRESIN_f3ql",   "rRNRESIN_f3q",     "Real Nonresidential Investment",
  "RRESINV",   "eRRESINV_f3ql",   "rRRESINV_f3q",     "Real Residential Investment",
  "RGF",       "eRGF_f3ql",       "rRGF_f3q",         "Real Federal Gov. Consumption",
  "RGSL",      "eRGSL_f3ql",      "rRGSL_f3q",        "Real State & Local Gov. Consumption",
  "HOUSING",   "eHOUSING_f3ql",   "rHOUSING_f3q",     "Housing Starts",
  "UNEMP",     "eUNEMP_f3ql",     "rUNEMP_f3q",       "Unemployment",
  "tb3m",      "etb3m_f3ql",      "rtb3m_f3q",        "3-Month Treasury Rate",
  "tn10y",     "etn10y_f3ql",     "rtn10y_f3q",       "10-Year Treasury Rate",
  "AAA",       "eAAA_f3ql",       "rAAA_f3q",         "AAA Corporate Bond Rate"
)


# Helper function to run regressions
run_all_forecast_regressions <- function(data, specs_tbl) {
  results_list <- specs_tbl %>%
    mutate(
      results = pmap(
        list(error_var, revision_var),
        ~ run_forecast_regressions(data = data, error_var = ..1, revision_var = ..2)
      )
    ) %>%
    select(short, label, results)
  
  return(results_list)
}

# Run all regressions automatically
all_results <- run_all_forecast_regressions(Bordalo, forecast_specs)


```

```{r Compile results, warning=FALSE}

# Helper function to extract results
extract_revision_stats <- function(results, var_label) {
  tibble(
    Variable = var_label,
    Coef_Consensus = coef(results$m_consensus)["forecast_revision"],
    SE_Consensus   = se(results$m_consensus)["forecast_revision"],
    P_Consensus    = pvalue(results$m_consensus)["forecast_revision"],
    Coef_Pooled = coef(results$m_indiv)["forecast_revision"],
    SE_Pooled   = se(results$m_indiv)["forecast_revision"],
    P_Pooled    = pvalue(results$m_indiv)["forecast_revision"],
    Median_Forecaster = results$median_f_by_f
  )
}

table_all <- all_results %>%
  mutate(stats = map2(results, label, extract_revision_stats)) %>%
  unnest(stats) %>% 
  mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
  select(-all_of(c("short", "label", "results")))

# Clean up workspace
rm(all_results)

```
